# Copyright (c) 2025 vivo Mobile Communication Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

declare_args() {
  build_type = "debug"

  # We are using "board" to determine which toolchain to use, so we
  # don't rely on target_cpu & target_os to make build decision. For
  # this reason, we don't set target_cpu & target_os. However, we
  # have set current_cpu & current_os for each toolchain. As stated
  # in https://gn.googlesource.com/gn/+/main/docs/reference.md#var_target_os,
  # GN doesn't use target_cpu & target_os internally either, so it
  # should be safe for us to use "board" to make build decision.
  board = "qemu_mps3_an547"
  direct_syscall_handler = true
  coverage = false
  profile = false
  rust_sysroot = ""
}

host_toolchain = "//build/toolchain:host"
if (board == "qemu_mps3_an547" || board == "raspberry_pico2_cortexm") {
  set_default_toolchain("//build/toolchain:blueos_thumbv8m")
  llvm_target = "thumbv8m.main-none-eabihf"
  qemu_exe = "qemu-system-arm"
  machine = "mps3-an547"
  libc_toolchain = "//build/toolchain:blueos_thumbv8m"
  librs_linux_emulation_toolchain =
      "//build/toolchain:librs_linux_emulation_thumbv8m"
  kernel_toolchain = "//build/toolchain:blueos_thumbv8m"
} else if (board == "qemu_mps2_an385") {
  llvm_target = "thumbv7m-none-eabi"
  set_default_toolchain("//build/toolchain:blueos_thumbv7m")
  qemu_exe = "qemu-system-arm"
  machine = "mps2-an385"
  libc_toolchain = "//build/toolchain:blueos_thumbv7m"
  kernel_toolchain = "//build/toolchain:blueos_thumbv7m"
  librs_linux_emulation_toolchain =
      "//build/toolchain:librs_linux_emulation_thumbv7m"
} else if (board == "qemu_virt64_aarch64") {
  llvm_target = "aarch64-unknown-none"
  set_default_toolchain("//build/toolchain:blueos_aarch64")
  qemu_exe = "qemu-system-aarch64"
  machine = "virt,virtualization=on,gic-version=3"
  libc_toolchain = "//build/toolchain:blueos_aarch64"
  kernel_toolchain = "//build/toolchain:blueos_aarch64"
  librs_linux_emulation_toolchain = "//build/toolchain:blueos_aarch64"
} else if (board == "qemu_riscv64") {
  llvm_target = "riscv64"
  set_default_toolchain("//build/toolchain:blueos_riscv64")
  qemu_exe = "qemu-system-riscv64"
  machine = "virt"
  libc_toolchain = "//build/toolchain:blueos_riscv64"
  kernel_toolchain = "//build/toolchain:blueos_riscv64"
} else if (board == "raspberry_pico2_cortexm") {
  import("//kernel/kernel/src/boards/$board/bsp_info.gni")
} else {
  set_default_toolchain("//build/toolchain:host")
  libc_toolchain = "//build/toolchain:host"
  kernel_toolchain = "//build/toolchain:host"
  librs_linux_emulation_toolchain = "//build/toolchain:host"

  # FIXME: Support mac on X86 and linux on aarch64.
  if (host_os == "linux") {
    llvm_target = "x86_64-unknown-linux-gnu"
    qemu_exe = "qemu-system-x86"
  } else if (host_os == "mac") {
    llvm_target = "aarch64-apple-darwin"
    qemu_exe = "qemu-system-arm"
  }
}

if (build_type == "debug") {
  default_config = "//build/config:debug"
} else if (build_type == "coverage") {
  default_config = "//build/config:coverage"
  coverage = true
} else if (build_type == "profile") {
  default_config = "//build/config:profile"
  profile = true
} else {
  default_config = "//build/config:release"
}

set_defaults("rust_proc_macro") {
  configs = [ default_config ]
}

set_defaults("rust_library") {
  configs = [ default_config ]
}

set_defaults("static_library") {
  configs = [ default_config ]
}

set_defaults("source_set") {
  configs = [ default_config ]
}

set_defaults("executable") {
  configs = [ default_config ]
}

set_defaults("build_rust") {
  configs = [ default_config ]
}
